{"title": "No.13第二十二天到第二十四天：JavaScript里面的居民们", "topic": "前端", "time": "20200113", "label": [], "needPassword": false, "text": "作业提交截止时间：09-01\n\n# 第二十二天到第二十四天：JavaScript里面的居民们\n\n## 课程目标\n\n掌握 JavaScript 中的各个数据类型、对象的概念及常用方法，这次课程的任务量比较多，但不要着急，也不要急于完成任务，认真写好每一个代码。加油！\n\n## 课程描述\n\n### 阅读\n\n首先，我们从变量和数据类型入手，同时学习一下 JavaScript 中的数字类型\n\n  * [W3School 变量](http://www.w3school.com.cn/js/js_variables.asp)\n  * [W3School 数据类型](http://www.w3school.com.cn/js/js_datatypes.asp)\n  * [JavaScript中值类型和引用类型的区别](https://blog.csdn.net/lxcao/article/details/71314605)\n  * [MDN 变量](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Variables)\n  * [W3School 数字](http://www.w3school.com.cn/js/js_obj_number.asp)\n  * [MDN 数字](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Math)\n  * [Number](http://www.w3school.com.cn/jsref/jsref_obj_number.asp)\n  * [Math](http://www.w3school.com.cn/jsref/jsref_obj_math.asp)\n\n### 编码\n\n首先练习数字相关的一些操作：\n\n    \n    \n    <div>\n        <label>Number A:<input id=\"radio-a\" type=\"radio\" name=\"math-obj\" value=\"a\"></label><input id=\"num-a\" type=\"text\">\n        <label>Number B:<input id=\"radio-b\" type=\"radio\" name=\"math-obj\" value=\"b\"></label><input id=\"num-b\" type=\"text\">\n    </div>\n    <div>\n        <button>判断当前选中的输入框输入内容是否为数字</button>\n        <button>把 A 四舍五入为 B 个小数位数的数字</button>\n        <button>当前选中数字的绝对值</button>\n        <button>对当前选中的数字进行上舍入</button>\n        <button>对当前选中的数字进行下舍入</button>\n        <button>把当前选中的数字四舍五入为最接近的整数</button>\n        <button>返回 A 和 B 中的最高值</button>\n        <button>返回 A 和 B 中的最低值</button>        \n    </div>\n    <p id=\"result\"></p>\n    \n\n基于如上HTML，实现需求\n\n  * 按照HTML中按钮的描述以此实现功能\n  * 计算结果显示在 id 为 result 的 P 标签中\n  * 除了第一个按钮，其它按钮操作时，都需要判断输入是否为数字，否则在 console 中输出错误信息\n\n### 阅读\n\n  * [W3School 字符串](http://www.w3school.com.cn/js/js_obj_string.asp)\n  * [W3School 字符串](http://www.w3school.com.cn/jsref/jsref_obj_string.asp)\n  * [MDN JavaScript中的字符串](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Strings)\n  * [MDN 有用的字符串方法](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Useful_string_methods)\n\n### 编码\n\n    \n    \n    <div>\n        <label>String A:\n            <input id=\"radio-a\" type=\"radio\" checked=\"true\" name=\"str-obj\" value=\"a\">\n        </label>\n        <textarea id=\"str-a\"></textarea>\n        <label>String B:\n            <input id=\"radio-b\" type=\"radio\" name=\"str-obj\" value=\"b\">\n        </label>\n        <textarea id=\"str-b\"></textarea>        \n        <label>Num A：<input id=\"num-a\" type=\"number\" value=\"0\"></label>\n        <label>Num B：<input id=\"num-b\" type=\"number\" value=\"1\"></label>\n    </div>\n    <div>\n        <button>获取当前选中输入的内容长度</button>\n        <button>当前选中输入中的第3个字符</button>\n        <button>把两个输入框的文字连接在一起输出（concat）</button>\n        <button>输入B中的内容，在输入A的内容中第一次出现的位置（indexOf）</button>\n        <button>输入A中的内容，在输入B的内容中最后一次出现的位置（lastIndexOf）</button>\n        <button>使用slice获取选中输入框内容的部分内容，参数为num-a及num-b</button>\n        <button>当前选中输入框的行数</button>\n        <button>使用substr获取选中输入框内容的子字符串，参数为num-a及num-b</button>\n        <button>把所选输入框中的内容全部转为大写</button>\n        <button>把所选输入框中的内容全部转为小写</button>\n        <button>把所选输入框中内容的半角空格全部去除</button>\n        <button>把所选输入框中内容的a全部替换成另外一个输入框中的内容</button>\n    </div>\n    <p id=\"result\"></p>\n    \n\n基于如上HTML，实现需求\n\n  * 按照HTML中按钮的描述以此实现功能\n  * 计算结果显示在 id 为 result 的 P 标签中\n\n### 编码\n\n    \n    \n    /*\n    实现一个字符串头尾去除空格的函数\n    注意需要去除的空格，包括全角、半角空格\n    暂时不需要学习和使用正则表达式的方式\n    */\n    function diyTrim(str) {\n        var result = \"\";\n    \n        // do something\n    \n        return result\n    }\n    \n    // 测试用例\n    console.log(diyTrim(' a f b    ')); // ->a f b\n    console.log(diyTrim('    ffdaf    ')); // ->ffdaf\n    console.log(diyTrim('1    ')); // ->1\n    console.log(diyTrim('　　f')); // ->f\n    console.log(diyTrim('  　  a f b 　　 ')); // ->a f b\n    console.log(diyTrim(' ')); // ->\n    console.log(diyTrim('　')); // ->\n    console.log(diyTrim('')); // ->\n    \n    /*\n    去掉字符串str中，连续重复的地方\n    */\n    function removeRepetition(str) {\n        var result = \"\";\n    \n        // do something\n    \n        return result;\n    }\n    \n    // 测试用例\n    console.log(removeRepetition(\"aaa\")); // ->a\n    console.log(removeRepetition(\"abbba\")); // ->aba\n    console.log(removeRepetition(\"aabbaabb\")); // ->abab\n    console.log(removeRepetition(\"\")); // ->\n    console.log(removeRepetition(\"abc\")); // ->abc\n    \n\n如以上代码，分别实现 diyTrim 及 removeRepetition 函数，并跑通代码中的测试用例。\n\n### 阅读\n\n  * [W3School 对象](http://www.w3school.com.cn/js/js_objects.asp)\n  * [MDN JavaScript 对象基础](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Basics)\n\n### 编码\n\n    \n    \n    var tree = {\n        \"id\": 0,\n        \"name\": \"root\",\n        \"left\": {\n            \"id\": 1,\n            \"name\": \"Simon\",\n            \"left\": {\n                \"id\": 3,\n                \"name\": \"Carl\",\n                \"left\": {\n                    \"id\": 7,\n                    \"name\": \"Lee\",\n                    \"left\": {\n                        \"id\": 11,\n                        \"name\": \"Fate\"\n                    }\n                },\n                \"right\": {\n                    \"id\": 8,\n                    \"name\": \"Annie\",\n                    \"left\": {\n                        \"id\": 12,\n                        \"name\": \"Saber\"\n                    }\n                }\n            },\n            \"right\": {\n                \"id\": 4,\n                \"name\": \"Tony\",\n                \"left\": {\n                    \"id\": 9,\n                    \"name\": \"Candy\"\n                }\n            }\n        },\n        \"right\": {\n            \"id\": 2,\n            \"name\": \"right\",\n            \"left\": {\n                \"id\": 5,\n                \"name\": \"Carl\",\n            },\n            \"right\": {\n                \"id\": 6,\n                \"name\": \"Carl\",\n                \"right\": {\n                    \"id\": 10,\n                    \"name\": \"Kai\"\n                }        \n            }\n        }\n    }\n    \n    // 假设id和name均不会重复，根据输入name找到对应的id\n    function findIdByName(name) {\n    \n    }\n    \n    // 假设id和name均不会重复，根据输入id找到对应的name\n    function findNameById(id) {\n    \n    }\n    \n    // 把这个对象中所有的名字以“前序遍历”的方式全部输出到console中\n    function getListWithDLR() {\n    \n    }\n    \n    // 把这个对象中所有的名字以“中序遍历”的方式全部输出到console中\n    function getListWithLDR() {\n    \n    }\n    \n    // 把这个对象中所有的名字以“后序遍历”的方式全部输出到console中\n    function getListWithLRD() {\n    \n    }\n    \n\n有如上对象，分别实现代码下方的几个函数，满足以下需求：\n\n  * 假设id和name均不会重复，根据输入name找到对应的id\n  * 假设id和name均不会重复，根据输入id找到对应的name\n  * 把这个对象中所有的名字以“前序遍历”的方式全部输出到console中\n  * 把这个对象中所有的名字以“中序遍历”的方式全部输出到console中\n  * 把这个对象中所有的名字以“后序遍历”的方式全部输出到console中\n\n### 阅读\n\n接下来我们学习一个非常有用的数据结构：数组\n\n  * [W3School 数组](http://www.w3school.com.cn/js/js_obj_array.asp)\n  * [W3School 数组参考](http://www.w3school.com.cn/jsref/jsref_obj_array.asp)\n  * [MDN 数组](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Arrays)\n  * [队列](https://baike.baidu.com/item/%E9%98%9F%E5%88%97/14580481?fr=aladdin)\n  * [栈](https://baike.baidu.com/item/%E6%A0%88/12808149)\n\n### 编码\n\n练习如何使用数组来实现队列，综合考虑使用数组的 push，pop，shift，unshift操作\n\n    \n    \n    <input id=\"queue-input\" type=\"text\">\n    <p id=\"queue-cont\">队列内容：apple-&gt;pear</p>    \n    <button id=\"in-btn\">入队</button>\n    <button id=\"out-btn\">出队</button>\n    <button id=\"font-btn\">打印队头元素内容</button>\n    <button id=\"empty-btn\">判断队列是否为空</button>\n    \n    <script>\n    \n    var queue = [\"apple\", \"pear\"];\n    \n    </script>\n    \n\n基于以上代码，实现如按钮中描述的功能：\n\n  * 实现如阅读材料中，队列的相关入队、出队、获取队头、判空的操作\n  * 队头对应数组中最后一个元素\n  * 入队和出队操作后，需要在 id 为 queue-cont 的 p 标签中更新显示队列中的内容，队头在最右侧，中间用 -> 连接（练习使用数组的join方法）\n\n### 编码\n\n对上面练习稍作小调整：\n\n    \n    \n    <input id=\"queue-input\" type=\"text\">\n    <p id=\"queue-cont\">队列内容：apple&lt;-pear</p>    \n    <button id=\"in-btn\">入队</button>\n    <button id=\"out-btn\">出队</button>\n    <button id=\"font-btn\">打印队头元素内容</button>\n    <button id=\"empty-btn\">判断队列是否为空</button>\n    \n    <script>\n    \n    var queue = [\"apple\", \"pear\"];\n    \n    </script>\n    \n\n基于以上代码，实现如按钮中描述的功能：\n\n  * 实现如阅读材料中，队列的相关入队、出队、获取队头、判空的操作\n  *     * 队头对应数组中第一个元素\n  * 入队和出队操作后，需要在 id 为 queue-cont 的 p 标签中更新显示队列中的内容，队头在最左侧，中间用 <\\- 连接（练习使用数组的join方法） \n\n### 编码\n\n练习如何使用数组来实现栈，综合考虑使用数组的 push，pop，shift，unshift操作\n\n    \n    \n    <input id=\"stack-input\" type=\"text\">\n    <p id=\"stack-cont\">栈内容：apple-gt;pear</p>    \n    <button id=\"push-btn\">进栈</button>\n    <button id=\"pop-btn\">退栈</button>\n    <button id=\"font-btn\">打印栈顶元素内容</button>\n    <button id=\"empty-btn\">判断栈是否为空</button>\n    \n    <script>\n    \n    var stack = [\"apple\", \"pear\"];\n    \n    </script>\n    \n\n基于以上代码，实现如按钮中描述的功能：\n\n  * 实现如阅读材料中，队列的相关进栈、退栈、获取栈顶、判空的操作\n  * 栈顶对应数组中最后一个元素\n  * 进栈和退栈操作后，需要在 id 为 stack-cont 的 p 标签中更新显示栈中的内容，栈顶在最右侧，中间用 -> 连接（练习使用数组的join方法）\n\n### 编码\n\n对上面练习进行小调整\n\n    \n    \n    <input id=\"stack-input\" type=\"text\">\n    <p id=\"stack-cont\">栈内容：applelt;-pear</p>    \n    <button id=\"push-btn\">进栈</button>\n    <button id=\"pop-btn\">退栈</button>\n    <button id=\"font-btn\">打印栈顶元素内容</button>\n    <button id=\"empty-btn\">判断栈是否为空</button>\n    \n    <script>\n    \n    var stack = [\"apple\", \"pear\"];\n    \n    </script>\n    \n\n基于以上代码，实现如按钮中描述的功能：\n\n  * 实现如阅读材料中，队列的相关进栈、退栈、获取栈顶、判空的操作\n  * 栈顶对应数组中第一个元素\n  * 进栈和退栈操作后，需要在 id 为 stack-cont 的 p 标签中更新显示栈中的内容，栈顶在最左侧，中间用 -< 连接（练习使用数组的join方法）\n\n### 阅读\n\n  * [MDN 排序](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\n\n### 编码\n\n    \n    \n    var arr = [43, 54, 4, -4, 84, 100, 58, 27, 140];\n    \n\n将上面数组分别按从大到小以及从小到大进行排序后在console中输出\n\n    \n    \n    var arr = ['apple', 'dog', 'cat', 'car', 'zoo', 'orange', 'airplane'];\n    \n\n将上面数组分别按字母顺序a-z及z-a进行排序，在console中输出\n\n    \n    \n    var arr = [[10, 14], [16, 60], [7, 44], [26, 35], [22, 63]];\n    \n\n将上面的二维数组，按照每个元素中第二个数从大到小的顺序进行排序输出，输出结果应该为：\n\n    \n    \n    [[22, 63], [16, 60], [7, 44], [26, 35], [10, 14]]\n    \n    \n    \n    var arr = [\n        {\n            id: 1,\n            name: 'candy',\n            value: 40\n        }, {\n            id: 2,\n            name: 'Simon',\n            value: 50\n        }, {\n            id: 3,\n            name: 'Tony',\n            value: 45\n        }, {\n            id: 4,\n            name: 'Annie',\n            value: 60\n        }\n    ];\n    \n\n将上面数组分别按元素对象的value值从小到大进行排序后输出\n\n### 编码\n\n学习通用的数据用不同的数据结构进行存储，以及相互的转换\n\n对象转为数组：\n\n    \n    \n    var scoreObject = {\n        \"Tony\": {\n            \"Math\": 95,\n            \"English\": 79,\n            \"Music\": 68\n        }, \n        \"Simon\": {\n            \"Math\": 100,\n            \"English\": 95,\n            \"Music\": 98\n        }, \n        \"Annie\": {\n            \"Math\": 54,\n            \"English\": 65,\n            \"Music\": 88\n        }\n    }\n    \n\n如上有一个用来存储学习成绩的对象，编写一个函数，将其转为如下的二维数组\n\n    \n    \n    var scoreArray = [\n        [\"Tony\", 95, 79, 68],\n        ……\n    ];\n    \n\n数组转为对象：\n\n    \n    \n    var menuArr = [\n        [1, \"Area1\", -1],\n        [2, \"Area2\", -1],\n        [3, \"Area1-1\", 1],\n        [4, \"Area1-2\", 1],\n        [5, \"Area2-1\", 2],\n        [6, \"Area2-2\", 2],\n        [7, \"Area1-2-3\", 4],\n        [8, \"Area2-2-1\", 6],\n    ];\n    \n\n如上有一个用来存储多级菜单数据的数组，编写一个函数，将其转为如下的对象\n\n    \n    \n    var menuObject = {\n        \"1\": {\n            name: \"Area1\",\n            subMenu: {\n                \"3\": {\n                    name: \"Area1-1\"\n                },\n                \"4\": {\n                    name: \"Area1-2\",\n                    subMenu: {\n                        \"7\": {\n                            name: \"Area1-2-3\"\n                        }\n                    }\n                }\n            }\n        }\n    \n        ……\n    \n    }\n    \n\n## 进阶任务\n\n如果你很快就完成上面的任务，可以去LeetCode上去多进行一些练习。\n\n## 提交\n\n把你今天觉得做得最好的代码放在Github后进行提交\n\n## 总结\n\n依然把今天的学习用时，收获，问题进行记录\n\n## 下一个任务预告\n\n下一个任务将继续学习 JavaScript，我们将接触更多的 JavaScript 对象\n\n"}