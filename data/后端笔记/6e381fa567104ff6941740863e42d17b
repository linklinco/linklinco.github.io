{"title": "日志级别", "topic": null, "time": "2025-04-06 16:54:11", "label": [], "needPassword": false, "text": "### **JAVA Log4j的8个日志级别**\n\nlog4j定义了8个级别的log（除去OFF和ALL，可以说分为6个级别），优先级从高到低依次为：OFF、FATAL、ERROR、WARN、INFO、DEBUG、TRACE、 ALL。\n\n**「ALL」**: 最低等级的，用于打开所有日志记录。\n**「TRACE」** : designates finer-grained informational events than the DEBUG.Since:1.2.12，很低的日志级别，一般不会使用。\n**「DEBUG」**: 指出细粒度信息事件对调试应用程序是非常有帮助的，主要用于开发过程中打印一些运行信息。\n**「INFO」**: 消息在粗粒度级别上突出强调应用程序的运行过程。打印一些你感兴趣的或者重要的信息，这个可以用于生产环境中输出程序运行的一些重要信息，但是不能滥用，避免打印过多的日志。\n**「WARN」**: 表明会出现潜在错误的情形，有些信息不是错误信息，但是也要给程序员的一些提示。\n**「ERROR」**: 指出虽然发生错误事件，但仍然不影响系统的继续运行。打印错误和异常信息，如果不想输出太多的日志，可以使用这个级别。\n**「FATAL」**: 指出每个严重的错误事件将会导致应用程序的退出。这个级别比较高了。重大错误，这种级别你可以直接停止程序了。\n**「OFF」**: 最高等级的，用于关闭所有日志记录。\n\n如果将`log level`设置在某一个级别上，那么比此级别优先级高的log都能打印出来。例如，如果设置优先级为`WARN`，那么`OFF、FATAL、ERROR、WARN`4个级别的log能正常输出，而INFO、DEBUG、TRACE、 ALL级别的log则会被忽略。Log4j建议只使用四个级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG。\n\n### **致命错误「FATAL」**\n\n表示需要立即被处理的系统级错误。当该错误发生时，表示服务已经出现了某种程度的不可用，系统管理员需要立即介入。\n\n这属于最严重的日志级别，因此该日志级别必须慎用，如果这种级别的日志经常出现，则该日志也失去了意义。\n\n通常情况下，一个进程的生命周期中应该只记录一次`FATAL`级别的日志，即该进程遇到无法恢复的错误而退出时。\n\n当然，如果某个系统的子系统遇到了不可恢复的错误，那该子系统的调用方也可以记入`FATAL`级别日志，以便通过日志报警提醒系统管理员修复。\n\n### **错误 「ERROR」**\n\n错误日志是用来传递系统或应用程序中出现的各种级别的错误。例如，操作系统在无法同步缓存区到磁盘的时候会生成错误信息。不确定的是，许多错误信息只能给出为什么出错的起点，要寻找出导致错误发生的根本原因还需要进一步分析。\n\n该级别的错误也需要马上被处理，但是紧急程度要低于`FATAL`级别。当ERROR错误发生时，已经影响了用户的正常访问。从该意义上来说，实际上`ERROR`错误和`FATAL`错误对用户的影响是相当的。\n\n`FATAL`相当于服务已经挂了，而`ERROR`相当于好死不如赖活着，然而活着却无法提供正常的服务，只能不断地打印`ERROR`日志。\n\n特别需要注意的是，`ERROR`和`FATAL`都属于[服务器](https://cloud.tencent.com/product/cvm/?from_column=20065&from=20065)自己的异常，是需要马上得到人工介入并处理的情况。而对于用户自己操作不当，如请求参数错误等等，是绝对不应该记为`ERROR`日志的。\n\n### **警告 「WARN」**\n\n警告信息是在系统即将丢失东西，而又不影响系统运行下而产生的，例如一个应用程序在没有获得正确数量的参数传递的时候，但是它又能够在没有这些参数的情况下正常运行，这种情况下可能就是记录警告信息提示使用者或者管理员。\n\n该日志表示系统可能出现问题，也可能没有问题，这种情况在例如网络的波动等情况。对于那些目前还不是错误，然而不及时处理也会变为错误的情况，也可以记为`WARN`日志，例如一个存储系统的磁盘使用量超过阀值，或者系统中某个用户的存储配额快用完等等。\n\n对于`WARN`级别的日志，虽然不需要系统管理员马上处理，也是需要即时查看并处理的。因此此种级别的日志也不应太多，能不打`WARN`级别的日志，就尽量不要打。\n\n### **信息 「INFO」**\n\n这种类型的信息被设计成告诉用户或者开发者一些没有风险的事情发生了。该种日志记录系统正常运行状态，例如某个子系统的初始化，某个请求的成功执行等等。\n\n通过查看`INFO`级别的日志，可以很快地对系统中出现的`WARN`,`ERROR`,`FATAL`错误进行定位。INFO日志不宜过多，通常情况下，`INFO`级别的日志应该不大于`TRACE`日志的10%。\n\n### **调试 DEBUG or TRACE**\n\n软件系统在应用程序代码运行时生成的调式信息，是为了给软件开发人员提供故障检测和定位问题的帮助。\n\n这两种日志具体的规范应该由项目组自己定义，该级别日志的主要作用是对系统每一步的运行状态进行精确的记录。\n\n通过该种日志，可以查看某一个操作每一步的执行过程，可以准确定位是何种操作，何种参数，何种顺序导致了某种错误的发生。可以保证在不重现错误的情况下，也可以通过DEBUG（或TRACE）级别的日志对问题进行诊断。\n\n需要注意的是，`DEBUG`日志也需要规范日志格式，应该保证除了记录日志的开发人员自己外，其他的如[运维](https://cloud.tencent.com/solution/operation?from_column=20065&from=20065)，测试人员等也可以通过`DEBUG`（或`TRACE`）日志来定位问题。"}