{"title": "Python 查漏补缺", "topic": null, "time": "2025-04-05 20:05:53", "label": [], "needPassword": false, "text": "### 1、open函数\n在Python中，`open()`函数是文件操作的核心方法，支持多种打开模式以满足不同需求。以下是主要打开方式及说明：\n\n#### 1. **基础模式**\n• `'r'`：**只读模式**（默认），文件不存在会报错。\n• `'w'`：**写入模式**，覆盖文件内容；文件不存在则创建。\n• `'a'`：**追加模式**，在文件末尾写入；文件不存在则创建。\n• `'x'`：**独占创建模式**，文件存在时报错，不存在则创建。\n\n#### 2. **二进制模式**\n• `'rb'` / `'wb'` / `'ab'`：以二进制格式读写文件（适用于图片、音视频等）。\n\n#### 3. **读写混合模式**\n• `'r+'`：读写模式，指针在开头，文件需存在。\n• `'w+'`：读写模式，覆盖文件内容；文件不存在则创建。慎用`w+`，打开文件时会清空文件内容\n• `'a+'`：读写模式，指针在末尾；文件不存在则创建。\n\n#### 4. **其他扩展模式**\n• `'t'`：**文本模式**（默认），与`'r'`、`'w'`等组合使用。\n• `'U'`：通用换行模式（已不推荐）。\n\n#### 5. **组合模式示例**\n• `'rb+'`：二进制读写模式。\n• `'wb+'`：二进制读写覆盖模式。\n\n#### **推荐实践**\n• 使用`with`语句自动管理文件关闭，避免资源泄露：\n  ```python\n  with open('file.txt', 'r', encoding='utf-8') as f:\n      content = f.read()\n  ```\n\n#### **注意事项**\n• 指定`encoding`参数（如`utf-8`）处理文本文件编码。\n• 大文件建议逐行读取（`for line in f`）而非`read()`，避免内存问题。\n\n完整语法参考：  \n`open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)`。\n\n#### 备忘\n使用f.seek()切换游标位置\n```python\nfile.seek(0)\n```\n- 读写操作会移动指针，需通过 `seek(0)` 重置位置。\n- 例如：写入后直接读取需先 `seek(0)`，否则读到空内容。\n**使用 `truncate()` 方法​**清空文件\n```python\n file.truncate(0)  # 将文件截断为0字节\n```\n\n\n### 2、`json`库\n\n| 函数                  | 输入输出                         | 主要用途                | 是否直接操作文件 |\n| ------------------- | ---------------------------- | ------------------- | -------- |\n| `json.dumps(data)`  | Python 对象 → JSON ​**​字符串​**​ | 生成 JSON 字符串，用于传输或存储 | 否        |\n| `json.dump(data,f)` | Python 对象 → 直接写入​**​文件​**​   | 将 JSON 数据直接保存到文件    | 是        |\n`dumps`特点\n- 返回字符串，适合网络传输或进一步处理。\n- 支持参数如 `indent`（缩进）、`ensure_ascii`（非ASCII字符处理）等\n\njson.load(f,encoding=\"utf8\") 直接操作文件，从文件中读取json\njson.loads(string) 字符串解析为json\n\n### 3、`time`库\nPython 的 `time` 库是标准库中用于处理时间相关操作的核心模块，支持时间戳获取、格式化转换、延时控制等功能。以下是其核心用法总结：\n\n---\n\n#### **1. 时间获取**\n• **当前时间戳**（Unix 时间，秒级浮点数）：  \n  ```python\n  import time\n  timestamp = time.time()  # 示例：1717234567.890123\n  ```\n• **结构化时间**（本地时区）：  \n  ```python\n  local_time = time.localtime()  # 返回 struct_time 对象\n  print(local_time.tm_year)  # 输出当前年份（如 2025）\n  ```\n• **UTC 时间**：  \n  ```python\n  utc_time = time.gmtime()  # 返回 UTC 的 struct_time\n  ```\n\n---\n\n#### **2. 时间格式转换**\n• **结构化时间 → 字符串**（自定义格式）：  \n  ```python\n  formatted = time.strftime(\"%Y-%m-%d %H:%M:%S\", local_time)  # 输出：2025-04-05 14:30:45\n  ```\n• **字符串 → 结构化时间**：  \n  ```python\n  time_obj = time.strptime(\"2025-04-05\", \"%Y-%m-%d\")  # 解析字符串\n  ```\n• **时间戳 → 可读字符串**：  \n  ```python\n  readable = time.ctime(timestamp)  # 输出：Sat Apr  5 14:30:45 2025\n  ```\n\n---\n\n#### **3. 延时与计时**\n• **程序暂停**（秒级）：  \n  ```python\n  time.sleep(2.5)  # 休眠 2.5 秒\n  ```\n• **高精度计时**（性能测试）：  \n  ```python\n  start = time.perf_counter()\n  # 执行代码...\n  end = time.perf_counter()\n  print(f\"耗时：{end - start:.4f} 秒\")\n  ```\n• **CPU 时间统计**（忽略 sleep）：  \n  ```python\n  cpu_start = time.process_time()\n  # 计算密集型代码...\n  cpu_time = time.process_time() - cpu_start\n  ```\n\n---\n\n#### **4. 其他实用功能**\n• **单调时钟**（不受系统时间调整影响）：  \n  ```python\n  start = time.monotonic()\n  time.sleep(1)\n  print(f\"真实耗时：{time.monotonic() - start:.2f} 秒\")\n  ```\n• **时区信息**：  \n  ```python\n  timezone_offset = time.timezone  # 本地时区偏移（秒）\n  ```\n\n---\n\n#### **5. 常见场景示例**\n• **倒计时**：  \n  ```python\n  def countdown(seconds):\n      start = time.time()\n      while time.time() - start < seconds:\n          remaining = seconds - (time.time() - start)\n          print(f\"剩余时间：{remaining:.1f}秒\", end=\"\\r\")\n          time.sleep(0.1)\n  ```\n• **进度条模拟**：  \n  ```python\n  for i in range(10):\n      time.sleep(0.5)\n      print(f\"[{'='*i}{' '*(10-i)}] {i*10}%\", end=\"\\r\")\n  ```\n\n---\n\n#### **注意事项**\n• **精度差异**：`time.time()` 在 Windows 下精度约 15ms，Unix 系统更高。\n• **时区处理**：默认依赖系统时区，跨时区建议结合 `datetime` 或 `pytz`。\n• **替代方案**：复杂日期计算推荐使用 `datetime` 模块。\n#### 字符串转为时间戳\n在 Python 中，使用 `time` 模块将字符串时间转换为时间戳可以通过以下步骤实现：\n\n##### **1. 核心方法**\n```python\nimport time\n\n# 定义时间字符串和对应格式\ntime_str = \"2025-04-05 14:30:00\"\ntime_format = \"%Y-%m-%d %H:%M:%S\"\n\n# 转换为时间戳\ntime_tuple = time.strptime(time_str, time_format)  # 解析为时间元组\ntimestamp = time.mktime(time_tuple)               # 转换为时间戳\n\nprint(timestamp)  # 输出：1743923400.0（浮点数，秒级）\n```\n\n##### **2. 关键说明**\n• **`strptime()`**：将字符串解析为时间元组（`struct_time`），需指定与字符串匹配的格式。\n  • 常用格式符：`%Y`（年）、`%m`（月）、`%d`（日）、`%H`（时）、`%M`（分）、`%S`（秒）。\n• **`mktime()`**：将时间元组转换为时间戳（自 1970-01-01 以来的秒数）。\n\n##### **3. 完整示例**\n```python\nimport time\n\ndef str_to_timestamp(time_str, time_format):\n    try:\n        time_tuple = time.strptime(time_str, time_format)\n        return time.mktime(time_tuple)\n    except ValueError as e:\n        print(f\"格式错误: {e}\")\n\n# 示例调用\ntimestamp = str_to_timestamp(\"2025/04/05\", \"%Y/%m/%d\")\nprint(timestamp)  # 输出：1743868800.0\n```\n\n##### **4. 注意事项**\n1. **时区问题**：`mktime()` 默认使用本地时区。若需 UTC 时间戳，可结合 `calendar.timegm()`（需导入 `calendar` 模块）。\n2. **格式匹配**：字符串格式必须与 `time_format` 完全一致，否则会报 `ValueError`。\n3. **精度**：结果为秒级浮点数，可转换为整数 `int(timestamp)` 去除小数部分。\n\n##### **5. 替代方案（`datetime` 模块）**\n若需更灵活的处理（如时区支持），推荐使用 `datetime`：\n```python\nfrom datetime import datetime\n\ndt = datetime.strptime(\"2025-04-05\", \"%Y-%m-%d\")\ntimestamp = dt.timestamp()  # 直接生成时间戳\n```\n\n##### **总结**\n• **简单场景**：`time.strptime()` + `time.mktime()`。\n• **复杂需求**：优先使用 `datetime` 模块（支持更多功能）。\n\n### 4、变量替换\n\n在 Python 中，字符串变量替换有多种方法，以下是常用的几种方式及其适用场景：\n\n---\n\n#### **1. `replace()` 方法（简单替换）**\n**语法**：  \n```python\nnew_string = original_string.replace(old, new[, count])\n```\n**示例**：  \n```python\ntext = \"I love Python\"\nnew_text = text.replace(\"Python\", \"JavaScript\")  # 替换全部匹配项\nprint(new_text)  # 输出: \"I love JavaScript\"\n```\n**特点**：  \n• 默认替换所有匹配项，可通过 `count` 参数限制次数。  \n• **区分大小写**，若需忽略大小写，可结合 `lower()` 或 `upper()` 使用。  \n\n---\n\n#### **2. `re.sub()`（正则表达式替换）**\n**语法**：  \n```python\nimport re\nnew_string = re.sub(pattern, repl, string[, count, flags])\n```\n**示例**：  \n```python\nimport re\ntext = \"Python is great. I love Python.\"\nnew_text = re.sub(r\"Python\", \"Java\", text, count=1)  # 仅替换第一个\nprint(new_text)  # 输出: \"Java is great. I love Python.\"\n```\n**特点**：  \n• 支持正则表达式，适合复杂匹配规则（如通配符、分组）。  \n• 可通过函数动态生成替换内容。  \n\n---\n\n#### **3. 字符串格式化（动态插入变量）**\n##### **(1) f-string（Python 3.6+）**\n```python\nname = \"Alice\"\ntext = f\"Hello, {name}!\"  # 直接嵌入变量\nprint(text)  # 输出: \"Hello, Alice!\"\n```\n##### **(2) `str.format()`**\n```python\ntext = \"Hello, {}!\".format(\"Bob\")  # 位置参数\nprint(text)  # 输出: \"Hello, Bob!\"\n```\n**特点**：  \n• **f-string** 简洁高效，支持表达式（如 `f\"{x + 1}\"`）。  \n• **`format()`** 兼容旧版本，支持复杂格式化（如对齐、精度）。  \n\n---\n\n#### **4. 模板字符串（`string.Template`）**\n**语法**：  \n```python\nfrom string import Template\nt = Template(\"Hello, $name!\")\nnew_text = t.substitute(name=\"Charlie\")\n```\n**特点**：  \n• 适合用户提供的模板，安全性较高（避免注入）。  \n\n---\n\n#### **方法对比**\n| 方法          | 适用场景                          | 是否支持正则 | 复杂度 |\n|---------------|----------------------------------|-------------|--------|\n| `replace()`   | 简单固定文本替换                 | ❌          | 低     |\n| `re.sub()`    | 复杂模式匹配（如通配符、多规则） | ✅          | 中     |\n| f-string      | 动态变量插入（Python 3.6+）      | ❌          | 低     |\n| `str.format`  | 兼容旧版本的格式化               | ❌          | 中     |\n\n---\n\n#### **总结**\n• **简单替换**：优先用 `replace()`。  \n• **复杂模式**：选择 `re.sub()`。  \n• **变量插入**：Python 3.6+ 用 f-string，旧版本用 `format()`。  \n\n### 5、pygame 播放声音代码\n\n```python\nimport time\nimport pygame\n\nfile='1.mp3' #文件名是完整路径名\npygame.mixer.init() #初始化音频\ntrack = pygame.mixer.music.load(file)#载入音乐文件\npygame.mixer.music.play()#开始播放\ntime.sleep(100)#播放10秒\npygame.mixer.music.stop()#停止播放\n```\n\n### 6、threading库用于python多线程\n\n```python\nimport time, threading\n\n# 新线程执行的代码:\ndef loop():\n    for i in range(0,10):\n        time.sleep(1)\n        print(i)\ndef pp():\n    for i in range(0,10):\n        time.sleep(2)\n        print(\"sw\")\nt1 = threading.Thread(target=loop, name='LoopThread1')\nt2 = threading.Thread(target=pp, name='LoopThread2')\nt1.start()\nt2.start()\n#.join等待直到进程中止\nt1.join()\nprint(\"cc\")\n#.alive\nt2.join()\n```"}