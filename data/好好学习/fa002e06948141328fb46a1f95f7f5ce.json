{"title": "Promise函数", "topic": "", "label": [], "time": 1666251965, "markdown": "# 1.Promise函数\n\n## 1.1出现需求\n\n为了解决`回调地狱`而产生的一种构造函数\n\n回调地狱，在回调函数中嵌套回调函数，反复嵌套很多层\n\n## 2.1使用\n\n```js\nnew Promise((resolve,reject)=>{\n    //promise函数主体部分\n})\n//定义后会产生一个promise函数\n//他接受一个函数作为参数，这个函数又接收2个函数作为参数\n```\n\n## 2.2promise对象的状态（state）和数值（resulte)\n\n定义后，promise 的默认状态是`pending`\n\n在主体部分中\n\n调用`resolve()`函数会将promise对象的状态改为`fulfilled`成功\n\n调用`reject()`函数会将promise对象的状态改为`rejected`失败\n\n**只有promise调用这两个函数才会改变状态**\n\n函数结果通过 `resolve(value)`或者`reject(reason)`来传递\n\n## 2.3promise对象的then方法\n\n```\nnew Promise((resolve,reject)=>{\n    //promise函数主体部分\n}).then((value)=>{\n//这里的函数都是异步执行的\n},(reason)=>{\n//\n})\n```\n\n`then`方法接受两个参数，当promise主体调用`resolve(value)`时，调用`then`里的第一个，否则调用第二个\n\n`.then()`会返回一个`promise`对象可以继续调用`.then()`方法，实现promise链式调用\n\n当未传入参数时，then方法会返回一个新的，状态和原promise相同的promise\n\n## 2.4catch方法\n\n```js\nnew Promise((resolve,reject)=>{\n    //构造体\n}).then(()=>{\n    \n}).catch((reason)=>{\n    //处理错误\n})\n```\n\n当`promise`函数构造体出现错误或者调用`reject()`时会调用`catch`内的函数\n\n```js\nthrow new Error(reason)\n```\n\n手动抛出的错误也会被捕获"}