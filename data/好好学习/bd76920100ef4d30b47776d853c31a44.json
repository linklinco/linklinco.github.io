{"title": "jquery笔记", "topic": null, "time": "2025-04-24 19:32:59", "label": [], "needPassword": false, "text": "# jquery笔记\n\n### 1、DOM对象与jQuery包装对象\n\n##### 1.1区别\n\n1、dom对象是使用`document.getElementById`等js DOM模型获取到的对象\n\n2、jQuery对象是通过jQuery获取的对象`$('#idname')` 返回的是一个JS包装集\n\n```js\n        var adom = document.getElementById('idname');\n        console.log(adom);\n        var jq = $('#idname');\n        console.log(jq);\n```\n\n\n\ndom获取不存在对象返回null\n\n##### 1.2DOM对象与jquery对象转换\n\n`var jqobject =$(domobject) `\n\njQuery对象转dom，直接取下标\n\n`var domobject=jqobject[0]`\n\n##### 1.3jQuery选择器\n\n基本选择器\n\n1. id选择器 `$(\"#id属性值\")`\n2. 类选择器`$(\".class属性值\")`\n3. 元素选择器`$(\"元素名\")`\n4. 通用选择器`$('*')`\n5. 组合选择器 `$(\"选择器1，选择器2...\")` 重复不会重复算\n\n层次选择器\n\n1. 后代选择器`$('fuyuans ziyuans')`包含第一代第二代等等的全部子元素\n2. 子代选择器`$(fuyuans>ziyuans)` 父元素的所有第一代元素\n3. 相邻选择器`$(gegeyuans+ziyuans)` 选择同辈后一个元素\n4. 同辈选择器`$(gegeyuans~didiyuans)`选择之后所有的弟弟元素\n\n表单选择器\n\n1. `$(':input')`获取表单元素 获取不仅包含input元素，还包含按键\n2. `$(':text')`\n3. `$(':password')`\n4. `$(':radio')` 单选框选择器\n5. `$(':checkbox')` 多选框选择器\n\n### 2、jQuery dom操作\n\n##### 2.1 操作元素的属性\n\n1. 获取属性 attr(属性名称) 、prop(属性名称)  如果没有返回空\n\n    属性分类：\n\n    **固有属性** 元素本身就有的（id、name、class）\n\n    attr和prop都可以获取\n\n    返回值的布尔值的属性（checked、selected 、disabled）等\n\n    **布尔属性** attr（属性名称）获取的是设置的属性，没有设置获取的是undefine\n\n    prop获取的是布尔值 设置获取true 未设置获取的是false\n\n    **自定义属性**\n\n    自定义属性 attr（属性名称）可以获取、prop（属性名称）获取不到\n\n2. 设置属性\n\n    和获取属性类似 attr(属性名称，属性值)；prop(属性名称，属性值)\n\n    也分固有属性和Boolean属性，prop设置的是true和false\n\n    prop操作不了自定义属性\n\n3. 移除属性\n\n    removeAttr(属性名称)\n\n总结如果属性的类型是Boolean类型，使用prop方法，否则使用attr方法\n\n##### 2.2操作元素的样式\n\n| 方法                                                         | 说明                                          |\n| ------------------------------------------------------------ | --------------------------------------------- |\n| attr('class')                                                | 获取class属性的值                             |\n| attr('class','样式名')                                       | 修改class属性的值，修改样式，原本样式会被覆盖 |\n| addClass('样式名')                                           | 添加样式名称                                  |\n| removeClass(样式名)                                          | 移除样式名称                                  |\n| css('属性名'，属性值)或者css({\"属性名\"：属性值，\"属性名\"：属性值}) | 添加具体的样式（添加行内样式）                |\n\n##### 2.3操作元素的内容\n\n| 方法                       | 说明               |\n| -------------------------- | ------------------ |\n| html()                     | 获取元素的html内容 |\n| html(\"html内容\")           | 设定元素的html内容 |\n| text ()                    | 获取元素的文本内容 |\n| text('text内容')           | 获取元素的文本内容 |\n| val() 只适用于表单元素内容 | 获取元素的value值  |\n| val('值')                  | 设置元素的value值  |\n\n##### 2.4、创建元素\n\n直接使用核心函数\n\n`$('元素内容')`或者`$('<p>this is a paragraph</p>')`\n\n添加元素\n\n| 方法                           | 说明                                                         |\n| ------------------------------ | ------------------------------------------------------------ |\n| prepend(content)               | 在被选**元素内部***的开头插入元素或内容，被追加的content参数可以是字符、HTML元素标记 |\n| $(content).prependTo(selector) | 把content加入到selector元素开头                              |\n| append(content)                | 在被选元素内部的结尾插入元素或者内                           |\n| $(content).appendTo(selector)  | 把content元素或内容插入selector元素内                        |\n| $(selector).before(content)    | 在元素之前插入内容（同级追加）                               |\n| $(selector).after(content)     | 在元素之后插入内容（同级追加）                               |\n\n如果元素不存在，会把元素追加到指定位置，否则将已经存在的元素插入，相当于剪切\n\n##### 删除元素\n\nremove（） 删除元素及其子元素\n\nempty（）清空内容，保留标签\n\n##### 遍历元素 each()方法\n\n使用\n\n```\n$(selector).each(function(index,element))  这里可以用this，代表这个element对象\n```\n\nindex是遍历元素的序号，从0开始\n\nelement是DOM元素\n\n### 3、jQuery事件\n\n##### 3.1 ready加载事件\n\nready加载事件，当dom加载完毕后执行，类似js中的load事件\n\n语法\n\n```js\n$(document).ready(function(){\n\n})\n简写：\n$(function(){\n\n})\n```\n\n可以写多个\n\n##### 3.2 jQuery绑定事件\n\nbind绑定事件 \n\n语法\n\n```\n绑定单个事件\n$(selector).bind(eventType,eventData,()=>{})\n绑定事件类型，传递参数{名：值，名1：值1}，处理函数\n直接绑定\n$(selector).事件名(function(){\n\n})\n绑定多个函数\n绑定同一个函数\n$(selector).bind(\"事件1 事件2 事件3...\",function(){\n\n})\n绑定多个函数\n$(selector).bind(\"事件1\",function(){\n\n}).bind(\"事件2\",function(){\n\n})\n或者传入一个对象\n$(selector).bind({\n'事件1':()=>{\n\n},\n'事件2':()=>{\n\n}\n})\n```\n\n### jquery ajax 异步无刷新技术\n\njquery调用ajax方法\n\n```\n$.ajax({\ntype:'',\nurl:'',\ndata:{[1,2,3,4]},//如果没有参数，不用写\ndataType:'json',//预期返回值会返回json对象\nsuccess:(data)=>{这里的data是返回的数据},\nerror:()=>{}\n})\n```\n\n参数\n\n```\ntype:请求方式GET/POST\nurl: 请求地址url\nasync:是否异步，默认true表示异步\ndata：发送到服务器的数据\ndataType:预期服务器返回的数据类型\ncontentType:设置请求   \n```\n\n$.get()请求\n\n```\n$.get('/api/1.json',{name:1},(data)=>{\nconsole.log(data);\n})\n```\n\n$.post请求\n\n```\n$.post('/upload',{data},(data)=>{\n\n})\n```\n\n$.getJSON()请求\n\n```\n$.getJSON('/api/1.json',{name:1},(data)=>{\nconsole.log(data);\n})\n```\n\n要求返回数据格式必须是json格式，如果返回数据不是json格式则不显示"}